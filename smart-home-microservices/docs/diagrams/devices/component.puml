@startuml

!include <C4/C4_Component>

title Component diagram for Manage module/device service

Container(api_gateway, "API Gateway", "Nginx", "Route/Auth/Load balansing")

Container_Boundary(devices, "Devices microservice") {
    Component(devices_controller, "Devices Controller")
    Component(devices_service, "Devices Service")
    Component(devices_adaptor, "Vendor Protocol Adaptor")
    Component(devices_dto, "Devices DTO")
    Component(devices_entity, "Devices Entity")
    Component(devices_repository, "Devices Repository")
    
    Rel(devices_controller, devices_service, "")
    Rel(devices_service, devices_repository, "")
    Rel(devices_controller, devices_dto, "")
    Rel_U(devices_service, devices_dto, "")
    Rel(devices_service, devices_adaptor, "")
    Rel(devices_adaptor, devices_service, "")
    Rel(devices_service, devices_entity, "")
    Rel_U(devices_repository, devices_entity, "")
}

System_Ext(smart_module, "Sensor/Actuator/Module", "Some vendor module")
ContainerDb(devices_db, "Devices Database", "PostgreSQL", "Stores devices information", $tags = "storage")
System(logging_monitoring, "ELK", "Store services logs and metrics.")
ContainerQueue(kafka, "Kafka")

Rel_L(devices_repository, devices_db, "Stores data in", "JDBC")
Rel_D(api_gateway, devices_controller, "Manage module/device information", "REST")
Rel(devices_adaptor, smart_module, "Setup/Read/Control module/device")
Rel(smart_module, devices_adaptor, "Send telemetry data")
Rel_L(devices_service, kafka, "Send telemetry data")
Rel_L(logging_monitoring, devices_controller, "Get logs/metrics", "REST")

@enduml
